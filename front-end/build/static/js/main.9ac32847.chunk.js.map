{"version":3,"sources":["logo.svg","layout/HomeMenu.js","layout/Login.js","routes/Home.js","routes/Home2.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomeMenu","exact","to","className","activeClassName","useStyles","makeStyles","card","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","classes","Card","variant","CardContent","Typography","color","gutterBottom","component","Home","state","checked","root","flexGrow","backgroundColor","height","paper","padding","textAlign","marginTop","style","this","Grid","container","spacing","item","xs","Login","Paper","Component","home2","App","path","Home2","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,6LCe5BC,EAXE,WACb,OACI,6BACI,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,IAAIC,UAAU,GAAGC,gBAAgB,KAAnD,UAAkE,6BAClE,kBAAC,IAAD,CAASH,OAAK,EAACC,GAAG,SAASC,UAAU,GAAGC,gBAAgB,SAAxD,WACA,kBAAC,IAAD,CAASH,OAAK,EAACC,GAAG,SAASC,UAAU,GAAGC,gBAAgB,SAAxD,a,gCCENC,EAAYC,YAAW,CACzBC,KAAM,CACFC,SAAU,KAEdC,OAAQ,CACJC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEfC,MAAO,CACHC,SAAU,IAEdC,IAAK,CACDC,aAAc,WAKP,aACX,IAAMC,EAAUZ,IAChB,OACI,kBAACa,EAAA,EAAD,CAAMf,UAAWc,EAAQV,KAAMY,QAAQ,YACnC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYlB,UAAWc,EAAQJ,MAAOS,MAAM,gBAAgBC,cAAY,GAAxE,QAGA,kBAACF,EAAA,EAAD,CAAYF,QAAQ,KAAKK,UAAU,OAGnC,kBAACH,EAAA,EAAD,CAAYlB,UAAWc,EAAQF,IAAKO,MAAM,iBAA1C,SAGA,kBAACD,EAAA,EAAD,CAAYF,QAAQ,QAAQK,UAAU,KAAtC,WAEN,6BACW,mBCqBNC,E,YA1DX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,SAAS,EACTC,KAAM,CACFC,SAAU,EACVC,gBAAiB,UACjBC,OAAQ,QAEVC,MAAO,CACLC,QAAS,OACTtB,OAAQ,OACRuB,UAAW,UAGbrB,MAAO,CACLoB,QAAS,OACTE,UAAW,OACXrB,SAAW,QACXoB,UAAW,SACXZ,MAAO,YApBL,E,sEA8BX,OACC,yBAAKc,MAAQC,KAAKX,MAAME,MACxB,kBAACU,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,GACvB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,IACf,yBAAKN,MAAOC,KAAKX,MAAMb,OAAvB,cAGA,kBAACyB,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACC,EAAD,OAEF,kBAACL,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CAAOR,MAAOC,KAAKX,MAAMM,OAAO,kBAAC,EAAD,QAGlC,kBAACM,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACE,EAAA,EAAD,CAAOR,MAAOC,KAAKX,MAAMM,e,GA9ClBa,aCaJ,SAASC,IACpB,OACI,kBAAC,WAAD,6BCeOC,MA5Bf,WACE,OAEE,kBAAC,IAAD,KAII,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO9C,OAAK,EAAC+C,KAAK,IAAIxB,UAAWC,IACjC,kBAAC,IAAD,CAAOxB,OAAK,EAAC+C,KAAK,SAASxB,UAAWyB,OCP5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ac32847.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component,Fragment } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst HomeMenu = () => {\r\n    return (\r\n        <div>\r\n            <NavLink exact to=\"/\" className=\"\" activeClassName=\"/\">홈</NavLink><br></br>\r\n            <NavLink exact to=\"/home2\" className=\"\" activeClassName=\"home2\">홈2</NavLink>\r\n            <NavLink exact to=\"/home3\" className=\"\" activeClassName=\"home3\">홈3</NavLink>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeMenu;","import React, { Component, Fragment } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        minWidth: 275,\r\n    },\r\n    bullet: {\r\n        display: 'inline-block',\r\n        margin: '0 2px',\r\n        transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: \"200px\",\r\n    },\r\n});\r\n\r\n\r\nexport default () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.card} variant=\"outlined\">\r\n            <CardContent>\r\n                <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                    Name\r\n        </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    Email\r\n        </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    Password\r\n          <br />\r\n                    {'This is test'}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\n","import React, { Component,Fragment } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport HomeMenu from \"../layout/HomeMenu\"\r\nimport Login from \"../layout/Login\"\r\nclass Home extends Component{\r\n    constructor() {\r\n        super();\r\n        this.state = { \r\n            checked: false,\r\n            root: {\r\n                flexGrow: 1,\r\n                backgroundColor: \"#000000\",\r\n                height: \"100%\"\r\n              },\r\n              paper: {\r\n                padding: \"10px\",\r\n                margin: \"20px\",\r\n                textAlign: 'center',\r\n               \r\n              },\r\n              title: {\r\n                padding: \"10px\",\r\n                marginTop: \"20px\",\r\n                fontSize : '100px',\r\n                textAlign: 'center',\r\n                color: \"#11ff11\"\r\n              }\r\n        \r\n      }\r\n    }\r\n \r\n    render(){\r\n   \r\n        \r\n\r\n       return(\r\n        <div style ={this.state.root}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n          <div style={this.state.title}>Meteoroid</div>\r\n            \r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Login></Login>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Paper style={this.state.paper}><HomeMenu/></Paper>\r\n            \r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <Paper style={this.state.paper}></Paper>\r\n            \r\n          </Grid>\r\n          \r\n        </Grid>\r\n      </div>\r\n\r\n       );\r\n   }\r\n\r\n\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component,Fragment } from 'react';\r\nimport { Route } from 'react-router-dom';\r\n/*\r\n    Filename: Use PascalCase\r\n    Reference Naming: Use PascalCase for React components and camelCase for their instances\r\n        ex: const reservationItem = <ReservationCard />;\r\n    Component Naming: Use the filename as the component name.\r\n    Props Naming: Avoid using DOM component prop names for different purposes.\r\n    Props Naming: Always use camelCase for prop names.\r\n    img: Must be with 'alt' tag\r\n    Refs: Always use ref callbacks.\r\n        ex: <Foo\r\n            ref={(ref) => { this.myRef = ref; }}\r\n            />\r\n    Event handler: Bind event handlers for the render method in the constructor.\r\n*/\r\n\r\n/*Convnetion:\r\n    state나 ref가 없을때  stateless component로 작성한다.\r\n\r\n*/\r\nexport default function home2(){\r\n    return(\r\n        <Fragment>\r\n    Hello this is home2!  \r\n    </Fragment>\r\n    )\r\n};\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport Home from './routes/Home'\r\nimport Home2 from './routes/Home2';\r\nimport HomeMenu from './layout/HomeMenu';\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Router>\r\n     \r\n        \r\n        \r\n        <Switch >\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Route exact path=\"/home2\" component={Home2} />\r\n          {/* <Route exact path=\"/home2\" component={Home2} /> */}\r\n          {/* <Route exact path=\"/FunctionalFrame\" component={FunctionalFrame} />\r\n          <Route exact path=\"/AWSLambda\" component={AWSLambda} />\r\n          <Route path=\"/about/:myname\" component={About}/>\r\n            <Route path=\"/posts\" component={Posts}/>\r\n            <Route path=\"/login\" component={Login}/> \r\n            <Route path=\"/dialog\" component={Dialog}/>\r\n            <Route path=\"/Popup\" component={Popup}/>\r\n            <Route path=\"/Table\" component={Table}/>\r\n            <Route path=\"/MainTable\" component={MainTable}/> \r\n            <Route path=\"/MinList\" component={MinList}/> \r\n            <Route component={NoMatch}/> */}\r\n        </Switch>\r\n     \r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}